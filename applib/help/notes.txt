
对数据进行增删改查  也可用: models.Table
https://www.cnblogs.com/yangmv/p/5327477.html


查
Table.objects.all()
Table.objects.all().values('user')    #只取user列
Table.objects.all().values_list('id','user')    #取出id和user列，并生成一个列表
Table.objects.get(id=1)
Table.objects.get(user='yangmv')

增
常用  Table.objects.create(user='yangmv',pwd='123456')
或者  obj = Table(user='yangmv',pwd='123456')   obj.save()
或者  dic = {'user':'yangmv','pwd':'123456'}   Table.objects.create(**dic)

删
Table.objects.filter(user='yangmv').delete()

改
Table.objects.filter(user='yangmv').update(pwd='520')
或者
obj = Table.objects.get(user='yangmv')
obj.pwd = '520'
obj.save()

样例
Blogs.objects.get(id=1)
Blogs.objects.filter(name='mike')
Blogs.objects.exclude(name='mike')
Blogs.objects.order_by("created_at")
Blogs.objects_raw("SELECT * FROM {{ app name}}_{{class/table name}}")
Blogs.objects.first().comments.first()
Blogs.objects.get(id=15).blog.name
Comment.objects.create(blog=Blog.objects.get(id=1), comment="test")

# 自定义 models.py 类的显示文字
class Blog(models.Model):
    ......
    def __repr__(self):
        return "<Blog object: {} {}>".format(self.name, self.desc)

liked_users (e.g. Book.objects.first().liked_users)
liked_books (e.g. User.objects.first().liked_books)

user.objects.message_set.all()
showRcds(User.objects.first().messages.all(), "one's all messages")

jinja for Django

in View.py
    context = {
        'all_rcds': User.objects.all(),
    }

in Index.html
         <div class="left">
            <h3>Title:</h3> <br>
            <ul>
            {% for rcd in my_rcds %}
                <li>{{ rcd.name }}&nbsp; : &nbsp;{{ rcd.desc }}</li>
            {% endfor %}
            </ul>
                <table border=1
                <table border=1 rules=cols/rows/all>
                <tr>
                    <th>Description</th>
                    <th>Trval start data</th>
                    <th>Trval end data</th>
                    <th>Plan</th>
                    <th>Action</th>
                </tr>
                {% for trip in my_trips %}
                    <tr>
                        <th>{{ trip.desc }}</th>
                        <th>{{ trip.date_from }}</th>
                        <th>{{ trip.date_to }}</th>
                        <th>{{ trip.destination }}</th>
                        <th><button id={{ trip.planner }} class='tab'>Cancel</button></th>
                    </tr>
                {% endfor %}
                </table>
        </div>

html validation err:
            {% for message in messages %}
                <li> {{ message }} </li>
            {% endfor %}


function add(name, n0, n1) {
                rout = '/ninja_gold/' + n0 + '/' + n1 +'/' + name;
                document.getElementById('form1').action = rout;
                document.getElementById('form1').submit();
            }


<input class='btn' type="button" value='Find Gold' onclick="add('house',2,5)"/>

display: table;
table-layout:fixed;

{% for message in all messages %}
{% for comment in all message.comments %}
    comment.id  comment.comment
{% endfor %}
{% endfor %}


client->AWS->NGINX-(WSGI)->Gunicorn(Green Corn)-(.sock)->App

The Process Manager: Green Unicorn , AKA Gunicorn
Usage: Restart the app automatically if it crashes.
       Gain insights into runtime performance and resource consumption.
       Modify settings dynamically to improve performance.
       Load Balancing

VIM Command  Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，VIM是自由软件。
SSH ( Secure Shell)
WSGI  is what Python web apps use to connect to the web server (NGINX).
using a certain implementation of a WSGI called Gunicorn (or Green Unicorn).
When we set up Gunicorn, we create a .sock file.
That .sock file is a UNIX domain socket that plugs Gunicorn into our app and NGINX.
Once our Ubuntu server has everything it needs, we'll set up Nginx and Gunicorn.

bash linux or unix command shell

产生模块自动安装文件:  pip freeze > requirementts.txt